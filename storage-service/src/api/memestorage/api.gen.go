// Package memestorage provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package memestorage

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ImageDto defines model for ImageDto.
type ImageDto struct {
	Data     *string `json:"Data,omitempty"`
	Filename *string `json:"Filename,omitempty"`
}

// MemeDto defines model for MemeDto.
type MemeDto struct {
	Hash      *string   `json:"Hash,omitempty"`
	Id        *string   `json:"Id,omitempty"`
	OcrResult *[]string `json:"OcrResult,omitempty"`
}

// MemeId defines model for MemeId.
type MemeId = string

// CreateMemeJSONRequestBody defines body for CreateMeme for application/json ContentType.
type CreateMemeJSONRequestBody = ImageDto

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /api/v1/meme)
	CreateMeme(ctx echo.Context) error

	// (GET /api/v1/meme/{MemeId})
	GetMemeInfo(ctx echo.Context, memeId MemeId) error

	// (GET /api/v1/meme/{MemeId}/image)
	GetMemeImage(ctx echo.Context, memeId MemeId) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateMeme converts echo context to params.
func (w *ServerInterfaceWrapper) CreateMeme(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateMeme(ctx)
	return err
}

// GetMemeInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetMemeInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "MemeId" -------------
	var memeId MemeId

	err = runtime.BindStyledParameterWithOptions("simple", "MemeId", ctx.Param("MemeId"), &memeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter MemeId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMemeInfo(ctx, memeId)
	return err
}

// GetMemeImage converts echo context to params.
func (w *ServerInterfaceWrapper) GetMemeImage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "MemeId" -------------
	var memeId MemeId

	err = runtime.BindStyledParameterWithOptions("simple", "MemeId", ctx.Param("MemeId"), &memeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter MemeId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMemeImage(ctx, memeId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/api/v1/meme", wrapper.CreateMeme)
	router.GET(baseURL+"/api/v1/meme/:MemeId", wrapper.GetMemeInfo)
	router.GET(baseURL+"/api/v1/meme/:MemeId/image", wrapper.GetMemeImage)

}

type CreateMemeRequestObject struct {
	Body *CreateMemeJSONRequestBody
}

type CreateMemeResponseObject interface {
	VisitCreateMemeResponse(w http.ResponseWriter) error
}

type CreateMeme200JSONResponse MemeDto

func (response CreateMeme200JSONResponse) VisitCreateMemeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMemeInfoRequestObject struct {
	MemeId MemeId `json:"MemeId"`
}

type GetMemeInfoResponseObject interface {
	VisitGetMemeInfoResponse(w http.ResponseWriter) error
}

type GetMemeInfo200JSONResponse []MemeDto

func (response GetMemeInfo200JSONResponse) VisitGetMemeInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMemeImageRequestObject struct {
	MemeId MemeId `json:"MemeId"`
}

type GetMemeImageResponseObject interface {
	VisitGetMemeImageResponse(w http.ResponseWriter) error
}

type GetMemeImage200JSONResponse ImageDto

func (response GetMemeImage200JSONResponse) VisitGetMemeImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /api/v1/meme)
	CreateMeme(ctx context.Context, request CreateMemeRequestObject) (CreateMemeResponseObject, error)

	// (GET /api/v1/meme/{MemeId})
	GetMemeInfo(ctx context.Context, request GetMemeInfoRequestObject) (GetMemeInfoResponseObject, error)

	// (GET /api/v1/meme/{MemeId}/image)
	GetMemeImage(ctx context.Context, request GetMemeImageRequestObject) (GetMemeImageResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// CreateMeme operation middleware
func (sh *strictHandler) CreateMeme(ctx echo.Context) error {
	var request CreateMemeRequestObject

	var body CreateMemeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateMeme(ctx.Request().Context(), request.(CreateMemeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateMeme")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateMemeResponseObject); ok {
		return validResponse.VisitCreateMemeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetMemeInfo operation middleware
func (sh *strictHandler) GetMemeInfo(ctx echo.Context, memeId MemeId) error {
	var request GetMemeInfoRequestObject

	request.MemeId = memeId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetMemeInfo(ctx.Request().Context(), request.(GetMemeInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMemeInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetMemeInfoResponseObject); ok {
		return validResponse.VisitGetMemeInfoResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetMemeImage operation middleware
func (sh *strictHandler) GetMemeImage(ctx echo.Context, memeId MemeId) error {
	var request GetMemeImageRequestObject

	request.MemeId = memeId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetMemeImage(ctx.Request().Context(), request.(GetMemeImageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMemeImage")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetMemeImageResponseObject); ok {
		return validResponse.VisitGetMemeImageResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
