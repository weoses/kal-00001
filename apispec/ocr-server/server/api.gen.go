// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package server

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ImageDto defines model for ImageDto.
type ImageDto struct {
	ImageBase64 *string `json:"ImageBase64,omitempty"`
	MimeType    *string `json:"MimeType,omitempty"`
}

// OcrRequestDto defines model for OcrRequestDto.
type OcrRequestDto struct {
	Image   *ImageDto `json:"Image,omitempty"`
	ImageId *string   `json:"ImageId,omitempty"`
}

// OcrResponseDto defines model for OcrResponseDto.
type OcrResponseDto struct {
	Image      *ImageDto          `json:"Image,omitempty"`
	ImageText  *[]OcrResponseItem `json:"ImageText,omitempty"`
	ImageThumb *ImageDto          `json:"ImageThumb,omitempty"`
}

// OcrResponseItem defines model for OcrResponseItem.
type OcrResponseItem struct {
	ProcessorKey *string `json:"ProcessorKey,omitempty"`
	Text         *string `json:"Text,omitempty"`
}

// PostApiV1OcrProcessJSONRequestBody defines body for PostApiV1OcrProcess for application/json ContentType.
type PostApiV1OcrProcessJSONRequestBody = OcrRequestDto

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /api/v1/ocr/process)
	PostApiV1OcrProcess(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostApiV1OcrProcess converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiV1OcrProcess(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiV1OcrProcess(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/api/v1/ocr/process", wrapper.PostApiV1OcrProcess)

}

type PostApiV1OcrProcessRequestObject struct {
	Body *PostApiV1OcrProcessJSONRequestBody
}

type PostApiV1OcrProcessResponseObject interface {
	VisitPostApiV1OcrProcessResponse(w http.ResponseWriter) error
}

type PostApiV1OcrProcess200JSONResponse OcrResponseDto

func (response PostApiV1OcrProcess200JSONResponse) VisitPostApiV1OcrProcessResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /api/v1/ocr/process)
	PostApiV1OcrProcess(ctx context.Context, request PostApiV1OcrProcessRequestObject) (PostApiV1OcrProcessResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostApiV1OcrProcess operation middleware
func (sh *strictHandler) PostApiV1OcrProcess(ctx echo.Context) error {
	var request PostApiV1OcrProcessRequestObject

	var body PostApiV1OcrProcessJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiV1OcrProcess(ctx.Request().Context(), request.(PostApiV1OcrProcessRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiV1OcrProcess")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostApiV1OcrProcessResponseObject); ok {
		return validResponse.VisitPostApiV1OcrProcessResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
